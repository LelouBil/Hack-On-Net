// <auto-generated />
using System;
using HackLinks_Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HackLinks_Server.Migrations
{
    [DbContext(typeof(DatabaseLink))]
    [Migration("20190822124804_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("HackLinks_Server.Computers.DataObjects.Binary", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("checksum");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("id");

                    b.ToTable("Binaries");
                });

            modelBuilder.Entity("HackLinks_Server.Computers.DataObjects.ServerAccount", b =>
                {
                    b.Property<string>("username")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<int>("banned");

                    b.Property<string>("mailaddress")
                        .HasMaxLength(64);

                    b.Property<string>("netmap")
                        .IsRequired();

                    b.Property<string>("password")
                        .HasMaxLength(64);

                    b.Property<bool>("permBanned");

                    b.Property<string>("permissions");

                    b.HasKey("username");

                    b.HasIndex("mailaddress")
                        .IsUnique();

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("HackLinks_Server.Computers.DataObjects.ServerAccount+NetMapNode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ip");

                    b.Property<string>("pos")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("NetMapNode");
                });

            modelBuilder.Entity("HackLinks_Server.Computers.Files.FileSystem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("RootFileId");

                    b.HasKey("id");

                    b.HasIndex("RootFileId")
                        .IsUnique();

                    b.ToTable("FileSystems");
                });

            modelBuilder.Entity("HackLinks_Server.Computers.Node", b =>
                {
                    b.Property<string>("ip")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15);

                    b.Property<int?>("FileSystemId");

                    b.Property<string>("OwnerId");

                    b.Property<string>("ServerAccountusername");

                    b.Property<int>("type");

                    b.HasKey("ip");

                    b.HasIndex("FileSystemId")
                        .IsUnique();

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.HasIndex("ServerAccountusername");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("HackLinks_Server.Files.File", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Checksum");

                    b.Property<int?>("FilesystemId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("OwnerId");

                    b.Property<int?>("ParentId");

                    b.Property<int>("Type");

                    b.Property<string>("content")
                        .IsRequired();

                    b.Property<int>("filePermissions");

                    b.Property<int>("groupId");

                    b.HasKey("id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Name", "ParentId", "FilesystemId")
                        .IsUnique();

                    b.ToTable("File");
                });

            modelBuilder.Entity("HackLinks_Server.Computers.Files.FileSystem", b =>
                {
                    b.HasOne("HackLinks_Server.Files.File", "RootFile")
                        .WithOne("FileSystem")
                        .HasForeignKey("HackLinks_Server.Computers.Files.FileSystem", "RootFileId");
                });

            modelBuilder.Entity("HackLinks_Server.Computers.Node", b =>
                {
                    b.HasOne("HackLinks_Server.Computers.Files.FileSystem", "fileSystem")
                        .WithOne()
                        .HasForeignKey("HackLinks_Server.Computers.Node", "FileSystemId");

                    b.HasOne("HackLinks_Server.Computers.DataObjects.ServerAccount", "owner")
                        .WithOne("homeComputer")
                        .HasForeignKey("HackLinks_Server.Computers.Node", "OwnerId");

                    b.HasOne("HackLinks_Server.Computers.DataObjects.ServerAccount")
                        .WithMany("Nodes")
                        .HasForeignKey("ServerAccountusername");
                });

            modelBuilder.Entity("HackLinks_Server.Files.File", b =>
                {
                    b.HasOne("HackLinks_Server.Files.File", "Parent")
                        .WithMany("children")
                        .HasForeignKey("ParentId");
                });
#pragma warning restore 612, 618
        }
    }
}
